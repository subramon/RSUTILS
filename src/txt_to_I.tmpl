return require 'Q/UTILS/lua/code_gen' { 
declaration = [[
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include "is_valid_chars_for_num.h"

extern int
txt_to_${out_type_displ}(
      const char * const X,
      ${out_type} *ptr_out
      );

]],

definition = [[
#include "txt_to_${out_type_displ}.h"

//START_FUNC_DECL
int
txt_to_${out_type_displ}(
      const char * const X,
      ${out_type} *ptr_out
      )
//STOP_FUNC_DECL
{
  int status = 0;
  char *endptr = NULL;
  errno = 0;
  ${big_out_type} out = 0;
  if ( ( X == NULL ) || ( *X == '\0' ) ) { go_BYE(-1); }
  if ( !is_valid_chars_for_num(X) ) { 
  fprintf(stderr, "Invalid number [%s]\n", X); go_BYE(-1); }
  out = ${converter}(X, &endptr, 10);
  if ( ( endptr != NULL ) && ( *endptr != '\0' ) && ( *endptr != '\n' ) ) { go_BYE(-1); }
  if ( ( out < ${min_val} ) || ( out > ${max_val} ) ) { go_BYE(-1); }
  if ( ((errno == ERANGE) && ((out == ${max_val}) || (out == ${min_val})))
      || ((errno != 0) && (out == 0))) {
    fprintf(stderr, "Could not convert [%s] to ${out_type_displ}\n", X);
    go_BYE(-1);
  }

  if (endptr == X) {
    fprintf(stderr, "No digits were found\n"); go_BYE(-1);
  }

  *ptr_out = (${out_type})out;
BYE:
  return status ;
}
]]
}
